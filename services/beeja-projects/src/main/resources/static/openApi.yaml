openapi: 3.0.1

info:
  title: Beeja Projects Management API
  version: v1.0
  description: |-
    `Product of tech.at.core`
    API documentation for the Beeja Projects Management Service. It allows users to manage
    projects, clients, and contracts via APIs secured by JWT authentication.
    
    ## Workflow Notes:
    1. First create Clients
    2. Then create Projects (requires clientId)
    3. Finally create Contracts (requires projectId)

    ## Authentication & Authorization
    Beeja uses JWT bearer token authentication.
    [Login to Beeja](https://app.beeja.io/login) to obtain your access token.

  contact:
    name: Beeja API Support
    email: api-support@beeja.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://localhost:8000/projects
    description: Local development server
  - url: /projects/v1
    description: Relative path (works behind proxies)

security:
  - bearerAuth: []

tags:
  - name: Clients
    description: Manage organization clients
  - name: Contracts
    description: Manage project contracts
  - name: Projects
    description: Manage organization projects
  - name: HelloWorld
    description: Simple greeting endpoint

paths:
  /v1/clients:
    get:
      tags:
        - Clients
      summary: Get all clients
      operationId: getAllClients
      responses:
        200:
          description: List of clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        400:
          description: Invalid parameter
          content:
            application/json:
              example:
                failureReason: BAD_REQUEST
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [Clients]
      summary: Add a new client
      operationId: addClientToOrganization
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ClientRequest'
      responses:
        201:
          description: Client created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        401:
          $ref: '#/components/responses/Unauthorized'
        409:
          description: Client with this name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                duplicateName:
                  value:
                    failureReason: CONFLICT
                    message: Client name must be unique
                    details:
                      field: clientName
                      rejectedValue: "Acme Corp"
        500:
          $ref: '#/components/responses/InternalServerError'

  /v1/clients/{clientId}:
    get:
      tags:
        - Clients
      summary: Get client by ID
      operationId: getClientById
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Client found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        400:
          description: Invalid parameter
          content:
            application/json:
              example:
                failureReason: BAD_REQUEST
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Clients
      summary: Update client details
      operationId: updateClient
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRequest'
      responses:
        200:
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        400:
          description: Invalid parameter
          content:
            application/json:
              example:
                failureReason: BAD_REQUEST
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v1/contracts:
    post:
      tags: [Contracts]
      summary: Create a new contract (requires existing project)
      description: |-
        ### Important:
        1. First create a project via `/projects` endpoint
        2. Use the returned `projectId` here
        3. `clientId` will be auto-filled from the project
      operationId: createContract
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractRequest'
      responses:
        201:
          description: Contract created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract'
        400:
          description: Invalid parameter
          content:
            application/json:
              examples:
                invalidProject:
                  value:
                    failureReason: BAD_REQUEST
                    message: The specified project does not exist
                    details:
                      field: projectId
                      rejectedValue: "invalid-project-id"
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v1/contracts/{contractId}:
    get:
      tags:
        - Contracts
      summary: Get contract by ID
      operationId: getContractById
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Contract found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract'
        400:
          description: Invalid parameter
          content:
            application/json:
              example:
                failureReason: BAD_REQUEST
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Contracts
      summary: Update contract
      operationId: updateContract
      parameters:
        - name: contractId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractRequest'
      responses:
        200:
          description: Contract updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract'
        400:
          description: Invalid parameter
          content:
            application/json:
              example:
                failureReason: BAD_REQUEST
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v1/contracts/project/{projectId}:
    get:
      tags:
        - Contracts
      summary: Get contracts by project
      operationId: getContractsByProject
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of contracts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contract'
        400:
          description: Invalid parameter
          content:
            application/json:
              example:
                failureReason: BAD_REQUEST
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v1/projects:
    get:
      tags:
        - Projects
      summary: Get all projects
      operationId: getAllProjects
      responses:
        200:
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        400:
          description: Invalid parameter
          content:
            application/json:
              example:
                failureReason: BAD_REQUEST
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [Projects]
      summary: Create a new project (must be done before creating contracts)
      description: |-
        ### Prerequisites:
        - Must have an existing client
        - clientId must be valid
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        201:
          description: Project created successfully
          headers:
            Location:
              description: URL of the created project
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          description: Invalid client reference
          content:
            application/json:
              examples:
                invalidClient:
                  value:
                    failureReason: BAD_REQUEST
                    message: The specified client does not exist
                    details:
                      field: clientId
                      rejectedValue: "invalid-client-id"
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v1/projects/{projectId}/{clientId}:
    get:
      tags:
        - Projects
      summary: Get project by ID and client ID
      operationId: getProjectByIdAndClientId
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: clientId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Project found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          description: Invalid parameter
          content:
            application/json:
              example:
                failureReason: BAD_REQUEST
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v1/projects/client/{clientId}:
    get:
      tags:
        - Projects
      summary: Get projects by client ID
      operationId: getProjectsByClientId
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        400:
          description: Invalid parameter
          content:
            application/json:
              example:
                failureReason: BAD_REQUEST
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v1/projects/{projectId}:
    put:
      tags:
        - Projects
      summary: Update project
      operationId: updateProject
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        200:
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          description: Invalid parameter
          content:
            application/json:
              example:
                failureReason: BAD_REQUEST
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v1:
    get:
      tags:
        - HelloWorld
      summary: Get greeting
      operationId: helloWorld
      responses:
        200:
          description: Successful response
          content:
            text/plain:
              schema:
                type: string
                example: "Hello, John Doe"
        401:
          $ref: '#/components/responses/Unauthorized'

  /v1/invoices:
    post:
      tags: [ Invoices ]
      summary: Create a new invoice for a contract
      operationId: createInvoice
      description: |
        Generates an invoice for a given contract. Requires permission: `CREATE_INVOICE`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceRequest'
      responses:
        201:
          description: Invoice created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /v1/invoices/{invoiceId}:
    get:
        tags: [ Invoices ]
        summary: Get invoice by ID
        operationId: getInvoiceById
        description: |
          Retrieves a single invoice by its unique ID. Requires permission: `GET_INVOICE`.
        parameters:
          - name: invoiceId
            in: path
            required: true
            schema:
              type: string
        responses:
          200:
            description: Invoice found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Invoice'
          401:
            $ref: '#/components/responses/Unauthorized'
          403:
            $ref: '#/components/responses/Forbidden'
          404:
            $ref: '#/components/responses/NotFound'
          500:
            $ref: '#/components/responses/InternalServerError'

  /v1/invoices/contract/{contractId}:
    get:
        tags: [ Invoices ]
        summary: Get all invoices for a contract
        operationId: getInvoicesByContractId
        description: |
          Retrieves all invoices associated with a specified contract. Requires permission: `GET_INVOICE`.
        parameters:
          - name: contractId
            in: path
            required: true
            schema:
              type: string
        responses:
          200:
            description: List of invoices for the contract
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Invoice'
          401:
            $ref: '#/components/responses/Unauthorized'
          403:
            $ref: '#/components/responses/Forbidden'
          500:
            $ref: '#/components/responses/InternalServerError'

  /v1/invoices/{invoiceId}/mark-paid:
    put:
        tags: [ Invoices ]
        summary: Mark invoice as paid
        operationId: markInvoiceAsPaid
        description: |
          Updates an invoice's status to 'paid'. Requires permission: `UPDATE_STATUS_INVOICE`.
        parameters:
          - name: invoiceId
            in: path
            required: true
            schema:
              type: string
        responses:
          200:
            description: Invoice marked as paid successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Invoice'
          401:
            $ref: '#/components/responses/Unauthorized'
          403:
            $ref: '#/components/responses/Forbidden'
          404:
            $ref: '#/components/responses/NotFound'
          500:
            $ref: '#/components/responses/InternalServerError'


components:
  schemas:
    Client:
      type: object
      properties:
        id:
          type: string
          example: "5f8d0d55b54764421b7156c3"
        name:
          type: string
          example: "Acme Corporation"
          minLength: 1
          maxLength: 100
          description: Must be unique across all clients
        createdAt:
          type: string
          format: date-time
          example: "2024-01-30T14:21:54.316Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-30T14:21:54.316Z"

    ClientRequest:
      type: object
      required:
        - clientName
        - clientType
        - taxDetails
        - primaryAddress
      properties:
        clientName:
          type: string
          example: "Acme Corporation"
        clientType:
          type: string
          enum: [ INTERNAL, INDIVIDUAL, COMPANY, ORGANIZATION ]
          example: "COMPANY"

        # Serialize nested objects as strings (JSON format)
        taxDetails:
          type: string
          example: '{ "taxCategory": "VAT", "taxNumber": "GB123456789" }'
          description: Tax details of the client.

        primaryAddress:
          type: string
          example: '{ "street": "123 Tech Park", "city": "San Francisco", "state": "CA", "postalCode": "94105", "country": "USA" }'
          description: The primary address of the client


    Contract:
      type: object
      properties:
        id:
          type: string
          example: "5f8d0d55b54764421b7156c4"
        projectId:
          type: string
          example: "5f8d0d55b54764421b7156c5"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-30T14:21:54.316Z"

    ContractRequest:
      type: object
      required:
        - projectId
        - contractTitle
        - contractValue
      properties:
        projectId:
          type: string
          example: "507f1f77bcf86cd799439011"
          description: Must reference an existing project
        contractTitle:
          type: string
          minLength: 5
          maxLength: 100
          example: "Website Development Agreement"
        contractValue:
          type: number
          minimum: 0
          example: 15000.00


    Project:
      type: object
      properties:
        id:
          type: string
          description: MongoDB generated ID
          example: "5f8d0d55b54764421b7156c5"
        projectId:
          type: string
          description: Business identifier for the project
          example: "PROJ-2023-001"
        clientId:
          type: string
          description: Required reference to existing client
          example: "5f8d0d55b54764421b7156c3"
        name:
          type: string
          example: "Website Redesign"
        description:
          type: string
          nullable: true
          example: "Complete website overhaul"
        status:
          type: string
          enum: [ DRAFT, ACTIVE, COMPLETED, CANCELLED ]
          example: "DRAFT"
        startDate:
          type: string
          format: date
          nullable: true
          example: "2023-06-01"
        endDate:
          type: string
          format: date
          nullable: true
          example: "2023-12-31"
        organizationId:
          type: string
          description: Auto-populated from user context
          example: "org_123"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-30T14:21:54.316Z"
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    ProjectRequest:
      type: object
      required:
        - name
        - clientId
      properties:
        name:
          type: string
          example: "Website Redesign"
          minLength: 1
        clientId:
          type: string
          example: "5f8d0d55b54764421b7156c3"
          description: Must reference an existing client

    Invoice:
      type: object
      properties:
        id:
          type: string
          description: MongoDB document ID
        invoiceId:
          type: string
          description: Business identifier for the invoice
        contractId:
          type: string
        projectId:
          type: string
        clientId:
          type: string
        organizationId:
          type: string
        amount:
          type: number
          format: double
        currency:
          type: string
          example: "USD"
        billingDate:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [ PENDING, PAID, CANCELLED, OVERDUE ]
        notes:
          type: array
          items:
            type: string
        invoiceFileId:
          type: string
        paymentDetails:
          $ref: '#/components/schemas/PaymentDetails'
        remittanceRef:
          type: string
        taxId:
          type: string
        amountInWords:
          type: string
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        vat:
          type: integer
        daysLeftForPayment:
          type: string
        invoicePeriod:
          $ref: '#/components/schemas/InvoicePeriod'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    InvoicePeriod:
        type: object
        properties:
          startDate:
            type: string
            format: date-time
          endDate:
            type: string
            format: date-time

    PaymentDetails:
      type: object
      description: Payment details for the invoice
      properties:
        accountName:
          type: string
        bankName:
          type: string
        accountNumber:
          type: string
        ifscNumber:
          type: string


    Task:
      type: object
      description: Task included in the invoice
      properties:
        taskName:
          type: string
        description:
          type: string
        price:
          type: number
          format: double


    Error:
      type: object
      properties:
        failureReason:
          type: string
          enum: [ CONFLICT, BAD_REQUEST, NOT_FOUND ]
        type:
          type: string
          example: "validation_error"
        code:
          type: string
          example: "BAD_REQUEST"
        message:
          type: string
          example: "Invalid request parameters"
        details:
          type: object
          example:
            field: "name"
            message: "must not be blank"

  responses:
    Unauthorized:
      description: Missing or invalid authentication
      content:
        application/json:
          example:
            failureReason: UNAUTHORIZED
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            duplicateClient:
              value:
                failureReason: CONFLICT
                message: "Client with name 'Acme' already exists"

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          example:
            failureReason: FORBIDDEN
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          example:
            failureReason: NOT_FOUND
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Server error
      content:
        application/json:
          example:
            failureReason: INTERNAL_SERVER_ERROR
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT