plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'com.google.cloud.tools.jib' version '3.3.2'
    id 'checkstyle'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'org.springdoc.openapi-gradle-plugin' version "1.9.0"
    id "org.sonarqube" version "4.4.1.3373"
}

group 'com.beeja.api'
version '1.0-SNAPSHOT'

bootJar{
    enabled(false)
}
bootBuildImage{
    enabled(false)
}

ext {
    set('springCloudVersion', "2023.0.1")
}
repositories {
    mavenCentral()
}

subprojects {

    group = 'com.beeja.api'
    version = '1.0-SNAPSHOT'


    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'org.springdoc.openapi-gradle-plugin'
    apply plugin: 'org.sonarqube'

    java {
        sourceCompatibility = JavaVersion.VERSION_17
    }


    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        compileOnly("org.springframework.boot:spring-boot-devtools")
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.3'
    }

    checkstyle {
        toolVersion = '10.12.1'
        configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
        showViolations = true
    }

    tasks.withType(Checkstyle).configureEach {
        classpath = files()
        reports {
            xml.required = false
            html.required = true
            html.outputLocation = file("$buildDir/reports/checkstyle.html")
        }
    }

    spotless {
        java {
            googleJavaFormat()
            target 'src/**/*.java'
        }
    }
}
task checkAll {
    dependsOn subprojects.collect { it.tasks.matching { it.name == 'check' } }
}

test {
    useJUnitPlatform()
}

task installLocalGitHook(type: Copy) {
    from new File(rootProject.rootDir, '../services/scripts/pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0775
}
sonar{
    properties {
        def props = new Properties()
        file("sonar.properties").withInputStream { props.load(it) }
        props.each { key, value ->
            property key, value
        }
    }
}

//Below line is used to get lineSeparator for checkStyles based on OS
def osLineSeparator = System.getProperty("os.name").
        toLowerCase().
        contains("win") ? "crlf" : "lf"

tasks.withType(Checkstyle) {
    inputs.property("lineSeparator", osLineSeparator)
    configProperties = [
            'lineSeparator': osLineSeparator
    ]
}

build.dependsOn installLocalGitHook