openapi: 3.0.1

info:
  title: Beeja - Expense Service
  version: v1
  description: |-
    Product of tech.at.core  
    API documentation for the Beeja Open API application. It allows users to access
    data via APIs secured by cookie and permissions.

    ## Authentication & Authorization
    Beeja uses a username-password authentication system.  
    [Login to Beeja](http://localhost:8000/login) to access secured endpoints in Swagger.

    ## Authorization Levels
    Most endpoints require functional-specific scopes depending on which endpoint is accessed.

externalDocs:
  description: Explore Beeja
  url: https://beeja.io/

servers:
  - url: http://localhost:8000/expense-management
    description: Beeja Expense Service

tags:
  - name: Expenses Controller
    description: Apply for, update, delete, or filter expense-related records.
  - name: Receipts Controller
    description: Manage expense receipt files (download and preview receipts).

paths:
  /v1:
    post:
      summary: Create an expense
      operationId: createExpense
      tags: [Expenses Controller]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requests/CreateExpense'
      responses:
        '201':
          description: The created expense
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: Filter Expenses
      operationId: filterExpenses
      tags: [Expenses Controller]
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
        - name: modeOfPayment
          in: query
          schema:
            type: string
        - name: expenseType
          in: query
          schema:
            type: string
        - name: expenseCategory
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Filtered expenses list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterApiResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v1/{expenseId}:
    put:
      operationId: updateExpense
      summary: Update an expense
      tags: [Expenses Controller]
      parameters:
        - name: expenseId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/requests/ExpenseUpdateRequest'
      responses:
        '200':
          description: Expense updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      operationId: deleteExpense
      summary: Delete an expense by ID
      tags: [Expenses Controller]
      parameters:
        - name: expenseId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expense deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v1/{expenseId}/status:
    get:
      operationId: getExpenseStatus
      summary: Get the status of an expense
      tags: [Expenses Controller]
      parameters:
        - name: expenseId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expense status retrieved
          content:
            application/json:
              example:
                status: "APPROVED"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v1/{expenseId}/settle:
    put:
      operationId: settleExpense
      summary: Settle an expense
      tags: [Expenses Controller]
      parameters:
        - name: expenseId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expense settled successfully
          content:
            application/json:
              example:
                status: "SETTLED"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v1/receipts/{fileId}:
    get:
      summary: Download receipt file
      operationId: downloadReceipt
      tags: [Receipts Controller]
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Receipt file downloaded successfully.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              description: File attachment header
              schema:
                type: string
                example: attachment; filename="receipt.pdf"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Receipt not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The requested receipt file could not be found.
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  responses:
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Something went wrong. Please try again later.

    Forbidden:
      description: Access forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: You are not authorized to perform this action.

    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Invalid input provided.

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Authentication is required to access this resource.

  schemas:
    # Define your component schemas below (like CreateExpense, ExpenseUpdateRequest, Expense, FilterApiResponse)
    requests:
      CreateExpense:
        type: object
        properties:
          amount:
            type: number
          category:
            type: string
          description:
            type: string
          modeOfPayment:
            type: string
          date:
            type: string
            format: date
        required: [amount, category, modeOfPayment, date]

      ExpenseUpdateRequest:
        type: object
        properties:
          amount:
            type: number
          category:
            type: string
          description:
            type: string
          receipt:
            type: string
            format: binary

    Expense:
      type: object
      properties:
        id:
          type: string
        amount:
          type: number
        category:
          type: string
        description:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time

    FilterApiResponse:
      type: object
      properties:
        expenses:
          type: array
          items:
            $ref: '#/components/schemas/Expense'
        total:
          type: integer