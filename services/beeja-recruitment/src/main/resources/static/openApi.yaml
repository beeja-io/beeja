openapi: 3.0.1
info:
  title: Beeja Recruitment Service
  version: v1
  description: |-
    `Product of tech.at.core`
       API documentation for the Beeja Recruitment Open API application.
       This service provides endpoints for managing applicants and referrals. 
       It includes functionalities such as creating, updating,and retrieving applicant information, 
       assigning interviewers, submitting feedback, and handling referrals.
    
        ## Authentication & Authorization
        Beeja uses an authentication system that is secured by username and password.
        [Please login to Beeja](http://localhost:8000/login) to access all APIs in Swagger.

externalDocs:
  description: Explore Beeja Recruitment API
  url: https://beeja.io/

servers:
  - url: http://localhost:8000/recruitments
    description: Recruitment APIs

paths:
  /v1/applicants:
    post:
      summary: Create a new applicant
      tags: [Applicants]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicantRequest'
      responses:
        '200':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Applicant'

    get:
      summary: Get all applicants in the organization
      tags: [Applicants]
      responses:
        '200':
          description: List of applicants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Applicant'

  /v1/applicants/combinedApplicants:
    get:
      summary: Get paginated applicants with filters
      tags: [Applicants]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: applicantId
          schema:
            type: string
        - in: query
          name: firstName
          schema:
            type: string
        - in: query
          name: positionAppliedFor
          schema:
            type: string
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/ApplicantStatus'
        - in: query
          name: experience
          schema:
            type: string
        - in: query
          name: fromDate
          schema:
            type: string
            format: date
        - in: query
          name: toDate
          schema:
            type: string
            format: date
        - in: query
          name: sortBy
          schema:
            type: string
        - in: query
          name: sortDirection
          schema:
            type: string
            enum: [asc, desc]
      responses:
        '200':
          description: Paginated applicant response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedApplicantResponse'

  /v1/applicants/{applicantID}:
    get:
      summary: Get applicant by ID
      tags: [Applicants]
      parameters:
        - in: path
          name: applicantID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Applicant object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Applicant'

    patch:
      summary: Update applicant partially
      tags: [Applicants]
      requestBody:
        content:
          application/json:
            schema:
              type: object
      parameters:
        - in: path
          name: applicantID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Updated applicant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Applicant'

  /v1/applicants/{applicantID}/assign-interviewer:
    patch:
      summary: Assign interviewer to applicant
      tags: [Applicants]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignedInterviewer'
      parameters:
        - in: path
          name: applicantID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Applicant'

  /v1/applicants/feedback/{applicantID}:
    patch:
      summary: Submit feedback for applicant
      tags: [Applicants]
      parameters:
        - in: path
          name: applicantID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicantFeedbackRequest'
      responses:
        '200':
          description: Feedback submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Applicant'

  /v1/applicants/resume/{fileId}:
    get:
      summary: Download applicant resume
      tags: [Applicants]
      parameters:
        - in: path
          name: fileId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Resume file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

  /v1/applicants/{applicantID}/status/{status}:
    put:
      summary: Change status of applicant
      tags: [Applicants]
      parameters:
        - in: path
          name: applicantID
          required: true
          schema:
            type: string
        - in: path
          name: status
          required: true
          schema:
            $ref: '#/components/schemas/ApplicantStatus'
      responses:
        '200':
          description: Status changed

  /v1/applicants/comments:
    post:
      summary: Add comment to applicant
      tags: [Applicants]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCommentRequest'
      responses:
        '200':
          description: Comment added

  /v1/applicants/{applicantID}/interview/{interviewID}:
    delete:
      summary: Delete interview from applicant
      tags: [Applicants]
      parameters:
        - in: path
          name: applicantID
          required: true
          schema:
            type: string
        - in: path
          name: interviewID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Interview deleted

  /v1/referrals:
    post:
      summary: Create new referral
      tags: [Referrals]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicantRequest'
      responses:
        '200':
          description: Referral created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Applicant'

    get:
      summary: Get all my referrals
      tags: [Referrals]
      responses:
        '200':
          description: List of referrals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Applicant'

  /v1/referrals/{resumeId}:
    get:
      summary: Download referral resume
      tags: [Referrals]
      parameters:
        - in: path
          name: resumeId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Resume file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

components:
  schemas:
    Applicant:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        status:
          $ref: '#/components/schemas/ApplicantStatus'
    ApplicantRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
    AssignedInterviewer:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
    ApplicantFeedbackRequest:
      type: object
      properties:
        feedback:
          type: string
        rating:
          type: number
    AddCommentRequest:
      type: object
      properties:
        applicantId:
          type: string
        comment:
          type: string
    PaginatedApplicantResponse:
      type: object
      properties:
        totalElements:
          type: integer
        applicants:
          type: array
          items:
            $ref: '#/components/schemas/Applicant'
    ApplicantStatus:
      type: string
      enum: [APPLIED,
             SHORTLISTED,
             INTERVIEW_SCHEDULED,
             HIRED,
             REJECTED]